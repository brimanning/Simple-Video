{"name":"simplevideo","tagline":"Lightest HTML5 Video Library with a Flash Fallback Around","body":"About simplevideo\r\n===\r\n\r\n__Note: This library is still very much in an alpha state. Older versions of browsers, mobile support, nor many versions of Flash have been tested yet. simplevideo works without issue in the latest versions of Firefox, Chrome, and Safari on Mac OSX 10.9. More testing will happen in the near future.__\r\n\r\nThe aim of simplevideo is to create a very light-weight interface for video on the web. videojs and JW Player are great on their own merits, but some developers need a simpler solution that's much closer to the video element itself. simplevideo aims to be that lower-level solution.\r\n\r\nQuick Start\r\n===\r\n+ Download from above\r\n+ Clone: `git clone https://github.com/brimanning/simplevideo.git`\r\n+ Bower: `bower install simplevideo`\r\n\r\nDependencies\r\n===\r\n+ [jQuery](http://jquery.com)\r\n+ [swfobject](https://code.google.com/p/swfobject)\r\n\r\nUsage\r\n===\r\nsimplevideo takes a target element to turn into an HTML5 video tag or falls back to a Flash embed if the user's browser does not support the video's mimetype. Note: simplevideo only currently supports mp4 videos, but more support is coming.\r\n\r\nYou'll need to reference jQuery and simplevideo on your page.\r\n\r\n\t<head>\r\n\t\t<script src=\"jquery.js\"></script>\r\n\t\t<script src=\"simplevideo.js\"></script>\r\n\t</head>\r\n\r\nFrom there, you'll be able to create video elements on the page normally and simplevideo will replace them when it is invoked.\r\n\r\n\t<div id=\"mySimpleVideo\"></div>\r\n\t<script>\r\n\t\tsimplevideo.init({\r\n\t\t\ttarget: '#mySimpleVideo',\r\n\t\t\tsrc: 'myVideoFilePath.mp4'\r\n\t\t});\r\n\t</script>\r\n\r\nSimilarly, you can use an existing video element and simplevideo will handle the existing attributes to play the video.\r\n\r\n\t<video class=\"my-video-class\" loop autoplay>\r\n\t\t<source src=\"myVideoFilePath.mp4\" type=\"video/mp4\" />\r\n\t</video>\r\n\t<script>\r\n\t\tvar myVideoAsAJQueryObject = $('.my-video-class');\r\n\t\tsimplevideo.init({\r\n\t\t\ttarget: myVideoAsAJQueryObject\r\n\t\t});\r\n\t</script>\r\n\r\nWhen you initialize a simplevideo object, it returns an object that allows you to interact with the video.\r\n\r\n\t<video class=\"my-video-class\" loop autoplay>\r\n\t\t<source src=\"myVideoFilePath.mp4\" type=\"video/mp4\" />\r\n\t</video>\r\n\t<script>\r\n\t\tvar myVideo = simplevideo.init({\r\n\t\t\ttarget: '.my-video-class'\r\n\t\t});\r\n\t\t\t\r\n\t\tmyVideo.pause();\r\n\t\tmyVideo.setVolume('30%');\r\n\t</script>\r\n\t\r\nThere are also hooks to listen to events that happen to the video.\r\n\r\n\t<video class=\"my-video-class\" loop autoplay>\r\n\t\t<source src=\"myVideoFilePath.mp4\" type=\"video/mp4\" />\r\n\t</video>\r\n\t<script>\r\n\t\tvar myVideo = simplevideo.init({\r\n\t\t\t\ttarget: '.my-video-class',\r\n\t\t\t\tonPause: function() {\r\n\t\t\t\t\talert('playing!');\r\n\t\t\t\t},\r\n\t\t\t\tonPlay: function() {\r\n\t\t\t\t\talert('paused...');\r\n\t\t\t\t},\r\n\t\t\t\tonPlaying: function(currentTime, videoDuration) {\r\n\t\t\t\t\tconsole.log('current time: ' + currentTime + ', video duration: ' + videoDuration);\r\n\t\t\t\t},\r\n\t\t\t\tonEnded: function() {\r\n\t\t\t\t\talert('video complete');\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t</script>\r\n\t\r\nIn total, the properties of a simplevideo instance is:\r\n\r\n+ `target` - __required__, the jQuery object or string for jQuery to find your object (note: this must identify a single object, not an array of objects)\r\n+ `src` - _default: none_, the video element url (will use a source specified in the HTML if omitted, otherwise simplevideo will use this value)\r\n+ `autoplay` - _default: false_, if the video should start playing once it's loaded (will use the value specified in the HTML if omitted, otherwise simplevideo will use this value)\r\n+ `poster` - _default: none_, what image the video should show before it's started playing (note: no poster is available if the browser falls back to Flash) (will use the value specified in the HTML if omitted, otherwise simplevideo will use this value)\r\n+ `controls` - _default: false_, if the browser's default controls should be displayed (note: no controls are available if the browser falls back to Flash) (will use the value specified in the HTML if omitted, otherwise simplevideo will use this value)\r\n+ `loop` - _default: false_, if the video should restart playing once it's finished (will use the value specified in the HTML if omitted, otherwise simplevideo will use this value)\r\n+ `onPlay` - _default: none_, a function executed when the video starts playing\r\n+ `onPause` - _default: none_, a function executed when the video is paused\r\n+ `onEnded` - _default: reset current time to 0_, a function executed when the video ends\r\n+ `onPlaying` - _default: none_, a function executed while the video is playing\r\n+ `onPlayingInterval` - _default: 30_, how many milliseconds between each execution of `onPlaying`\r\n+ `swfobjecturl` - _default: 'swfobject.js'_, where the swfobject library should be loaded from (only loaded when necessary)\r\n+ `swfUrl` - _default: 'simplevideo.swf'_, where the simplevideo Flash fallback should be loaded from\r\n+ `playerProductInstallSwfUrl` - _default: 'playerProductInstall.swf'_, where the update Flash swf should be loaded from\r\n\r\nIn addition, there are a few methods and properties returned in the simplevideo object:\r\n\r\n+ `getCurrentTime()` - returns the current time of the video in seconds\r\n+ `setCurrentTime(secondsOrPercentage)` - sets the current time of the video in seconds or a percent in the form of a string `'50%'` to go halfway through a video\r\n+ `getDuration()` - returns the duration of the video in seconds\r\n+ `getVolume()` - returns the volume of the video element\r\n+ `setVolume(zeroToOneOrPercentage)` - sets the volume of the video element from 0 to 1 or a percent in the form of a string `'50%'` to put the volume halfway up\r\n+ `play()` - play the video from it's current location (triggers the `onPlay` callback)\r\n+ `pause()` - pause the video (triggers the `onPause` callback)\r\n+ `fullscreen(trueToEnterFullscreenAndFalseToExit)` - places the video in fullscreen mode (note: to enter fullscreen in webkit broswers, this needs to be triggered as part of a click or keyboard action)\r\n+ `paused` - whether or not the video is currently paused\r\n+ `target` - the jQuery element of the video itself or the container of the swf\r\n+ `swf` - the swf element created (if Flash is required)\r\n+ `swfId` - a randomly generated uuid to differentiate the swf element (if Flash is required)\r\n\r\nCreator\r\n===\r\nBrian Manning\r\n\r\n+ [http://github.com/brimanning](http://github.com/brimanning)\r\n+ [http://brimanning.com](http://brimanning.com)\r\n+ [http://twitter.com/brimanning](http://twitter.com/brimanning)\r\n\r\nLicense\r\n===\r\nCode and documentation copyright 2014 Brian Manning. Code released under the [MIT license](https://github.com/brimanning/simplevideo/blob/master/LICENSE.md).\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}